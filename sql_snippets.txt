DISPATCH:
-- PostgreSQL Stored Procedure for Dispatching Sales Order
CREATE OR REPLACE FUNCTION dispatch_sales_order(sales_order_id INTEGER)
RETURNS VOID LANGUAGE plpgsql AS $$
DECLARE
    position RECORD;
    product_id INTEGER;
    ordered_quantity INTEGER;
    available_stock INTEGER;
BEGIN
    -- Start a transaction
    -- (Note: In PostgreSQL, the function itself runs within a transaction)

    -- Loop through sales order positions
    FOR position IN SELECT * FROM SalesOrderPositions WHERE SalesOrderHeaderID = sales_order_id LOOP
        product_id := position.ProductID;
        ordered_quantity := position.OrderedQuantity;

        -- Check available stock
        SELECT SUM(quantity) INTO available_stock FROM ProductBatch WHERE ProductID = product_id;
        IF available_stock < ordered_quantity THEN
            -- Insufficient stock, rollback will happen automatically when the function exits
            RAISE EXCEPTION 'Insufficient stock for product %', product_id;
            RETURN;
        END IF;

        -- Update sent_quantity for the SalesOrderPosition
        UPDATE SalesOrderPositions SET SentQuantity = ordered_quantity WHERE ID = position.ID;

        -- Reduce stock level in ProductBatch
        -- (Implementation depends on your specific logic)
    END LOOP;

    -- Update SalesOrderHeader status
    UPDATE SalesOrderHeader SET Status = 'Dispatched' WHERE ID = sales_order_id;

    -- Commit transaction is automatic in PostgreSQL functions
END;
$$;
